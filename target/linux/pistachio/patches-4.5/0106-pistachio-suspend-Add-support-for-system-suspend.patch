From d26a32c4d3bb7a2918c41f5841bf6d6002376908 Mon Sep 17 00:00:00 2001
From: Govindraj Raja <Govindraj.Raja@imgtec.com>
Date: Mon, 14 Sep 2015 12:18:11 +0100
Subject: pistachio: suspend: Add support for system suspend.

Add platform specific driver for supporting system wide suspend
Steps involved in suspend path:
1.) Configure DDR in self refresh mode
2.) scale sys_pll to Minimum VCO(350Mhz to 100Mhz)
3.) scale mips_pll to lower VCO(416Mhz to 208Mhz)
4.) gate the mips clock.

Tested with uart wakeup on pistachio bring-up-board.

Change-Id: I6f867867056aee8c43aca73d4e1ba58ecde78249
Signed-off-by: Govindraj Raja <Govindraj.Raja@imgtec.com>
---
 arch/mips/pistachio/Makefile  |   2 +-
 arch/mips/pistachio/pm.c      | 136 ++++++++++++++++++++++++++++++
 arch/mips/pistachio/suspend.S | 187 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 324 insertions(+), 1 deletion(-)
 create mode 100644 arch/mips/pistachio/pm.c
 create mode 100644 arch/mips/pistachio/suspend.S

diff --git a/arch/mips/pistachio/Makefile b/arch/mips/pistachio/Makefile
index ca50711..9e73114 100644
--- a/arch/mips/pistachio/Makefile
+++ b/arch/mips/pistachio/Makefile
@@ -1,3 +1,3 @@
 obj-y	+= init.o irq.o time.o
 
-obj-$(CONFIG_SUSPEND) += irq_wake.o
+obj-$(CONFIG_SUSPEND) += irq_wake.o pm.o suspend.o
diff --git a/arch/mips/pistachio/pm.c b/arch/mips/pistachio/pm.c
new file mode 100644
index 0000000..206c6bb
--- /dev/null
+++ b/arch/mips/pistachio/pm.c
@@ -0,0 +1,136 @@
+/*
+ * PM Suspend to memory driver for Pistachio Platform.
+ *
+ * Copyright (C) 2015 Imagination Technologies Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ */
+
+#include <asm/tlbflush.h>
+#include <linux/genalloc.h>
+#include <linux/init.h>
+#include <linux/of_platform.h>
+#include <linux/pm.h>
+#include <linux/suspend.h>
+
+/* MIPS TOP level Gate reg */
+#define CR_TOP_MIPS_CLOCK_GATE		KSEG1ADDR(0x18144104)
+#define CR_TOP_MIPSCLKOUT_MIPS_BIT 	0
+
+static void (*pistachio_suspend_in_sram_fn)(void);
+extern void pistachio_sram_suspend(void);
+extern bool pistachio_wakeirq_set(void);
+extern unsigned int pistachio_sram_suspend_sz;
+
+static int pistachio_pm_prepare_late(void)
+{
+	/*
+	 * Deny system suspend if any of the wakeup sources
+	 * are not enabled. If we enter suspend with no wakeup
+	 * sources system is in unusable state.
+	 */
+	if (!pistachio_wakeirq_set()) {
+		pr_warn("[%s]: No wakeup sources set cannot suspend system\n",
+					__func__);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int pistachio_pm_enter(suspend_state_t state)
+{
+	local_flush_tlb_all();
+
+	if (!pistachio_suspend_in_sram_fn) {
+		/*
+		 * Disable MIPS clock, this is only clock gating not power gating.
+		 * so MIPS state will not be lost and we can resume from gated
+		 * state.
+		 */
+
+		clear_bit(CR_TOP_MIPSCLKOUT_MIPS_BIT,
+				(void __iomem *)CR_TOP_MIPS_CLOCK_GATE);
+
+		/*
+		 * Enable MIPS clock back after wakeup,
+		 * PC will start resuming execution from gated state
+		 * for a small time cycle, So enable MIPS clocks immediately
+		 * after resume.
+		 * Note: Only Wake irq mask can wakeup the system.
+		 */
+
+		set_bit(CR_TOP_MIPSCLKOUT_MIPS_BIT,
+				(void __iomem *)CR_TOP_MIPS_CLOCK_GATE);
+
+	} else {
+		/*
+		 * call low level suspend function in sram,
+		 * as we need to put DDR to self refresh mode.
+		 */
+		pistachio_suspend_in_sram_fn();
+	}
+
+	return 0;
+}
+
+static const struct platform_suspend_ops pistachio_pm_ops = {
+	.valid		= suspend_valid_only_mem,
+	.prepare_late	= pistachio_pm_prepare_late,
+	.enter		= pistachio_pm_enter,
+};
+
+static int __init pistachio_pm_init(void)
+{
+	phys_addr_t sram_pbase;
+	struct device_node *node;
+	struct platform_device *pdev;
+
+	struct gen_pool *sram_pool;
+	unsigned long sram_vbase;
+	int ret = 0;
+	void __iomem *suspend_sram_base;
+
+	suspend_set_ops(&pistachio_pm_ops);
+
+	node = of_find_compatible_node(NULL, NULL, "mmio-sram");
+	if (!node) {
+		pr_warn("%s: failed to find sram node!\n", __func__);
+		return -ENODEV;
+	}
+
+	pdev = of_find_device_by_node(node);
+	if (!pdev) {
+		pr_warn("%s: failed to find sram device!\n", __func__);
+		ret = -ENODEV;
+		goto put_node;
+	}
+
+	sram_pool = dev_get_gen_pool(&pdev->dev);
+	if (!sram_pool) {
+		pr_warn("%s: sram pool unavailable!\n", __func__);
+		ret = -ENODEV;
+		goto put_node;
+	}
+
+	sram_vbase = gen_pool_alloc(sram_pool, pistachio_sram_suspend_sz);
+	if (!sram_vbase) {
+		pr_warn("%s: unable to alloc sram!\n", __func__);
+		ret = -ENOMEM;
+		goto put_node;
+	}
+
+	sram_pbase = gen_pool_virt_to_phys(sram_pool, sram_vbase);
+	suspend_sram_base = ioremap(sram_pbase, pistachio_sram_suspend_sz);
+	memcpy(suspend_sram_base, (void *)pistachio_sram_suspend,
+				pistachio_sram_suspend_sz);
+	pistachio_suspend_in_sram_fn = (void *)suspend_sram_base;
+
+put_node:
+	of_node_put(node);
+
+	return ret;
+}
+late_initcall(pistachio_pm_init);
diff --git a/arch/mips/pistachio/suspend.S b/arch/mips/pistachio/suspend.S
new file mode 100644
index 0000000..a7a9df9
--- /dev/null
+++ b/arch/mips/pistachio/suspend.S
@@ -0,0 +1,187 @@
+/*
+ * PM Suspend to sram memory routine for pistachio Platform.
+ *
+ * Copyright (C) 2015 Imagination Technologies Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ */
+
+#include <asm/asm.h>
+#include <asm/asm-offsets.h>
+#include <asm/regdef.h>
+
+/* DDR Register Maps */
+#define	DDR_PCTL_SCTL			0xB8180004
+#define	DDR_PCTL_SCTL_SLEEP_CMD		0x00000003
+#define	DDR_PCTL_SCTL_WKUP_CMD		0x00000004
+#define	DDR_PCTL_STAT			0xB8180008
+#define	DDR_PCTL_STAT_STL_LOW_PWR	0x00000005
+#define	DDR_PCTL_STAT_STL_ACCESS	0x00000003
+
+/* SYS-PLL Top level register */
+#define	CR_SYS_PLL_STATUS		0xB8144038
+#define	CR_SYS_PLL_CTRL1		0xB814403C
+#define	CR_SYS_PLL_FBDIV_MASK		(0xFFF << 6)
+#define	CR_SYS_PLL_LOCK			0x00000001
+#define	CR_SYS_PLL_MINVCO_FB100		(100 << 6)
+#define	CR_SYS_PLL_VCO_FB350		(350 << 6)
+
+/* MIPS TOP level Gate reg */
+#define	CR_MIPS_PLL_STATUS		0xB8144000
+#define	CR_MIPS_PLL_CTRL1		0xB8144004
+#define	CR_MIPS_PLL_FBDIV_MASK		(0xFFF << 6)
+#define	CR_MIPS_PLL_FBDIV_MASK_SET_40	(40 << 6)
+#define	CR_MIPS_PLL_FBDIV_MASK_SET_80	(80 << 6)
+#define	CR_MIPS_PLL_LOCK		0x00000001
+
+#define	CR_TOP_MIPS_CLOCK_GATE		0xB8144104
+#define	MIPS_CLOCK_GATE_MASK		0x00000001
+
+/* Top level system register */
+#define	CR_DDR_CTRL			0xB8149020
+#define	CR_DDR_CLK_MASK			0x00000002
+
+.text
+FEXPORT(pistachio_sram_suspend)
+LEAF(pistachio_sram_suspend)
+
+enter_ddr_self_refresh:
+	/* request uPCTL Low pwer state from access state */
+	PTR_LI	t0, DDR_PCTL_SCTL
+	PTR_LI  t1, DDR_PCTL_SCTL_SLEEP_CMD
+	PTR_S	t1, (t0)
+
+	/*
+	 * Poll to check if we transitioned
+	 * to Low power state
+	 */
+
+	PTR_LI	t0, DDR_PCTL_STAT
+lower_power_poll:
+	PTR_L	t1, (t0)
+	and	t2, t1, DDR_PCTL_STAT_STL_LOW_PWR
+	bne	t2, DDR_PCTL_STAT_STL_LOW_PWR, lower_power_poll
+
+ddr_clk_gate:
+	PTR_LI  t0, CR_DDR_CTRL
+	PTR_L	t1, (t0)
+	and	t2, t1, ~CR_DDR_CLK_MASK
+	PTR_S	t2, (t0)
+
+	/*
+	 * We are scaling syspll so we need to scale mips pll as well.
+	 * Scaling MIPS to 208Mhz.
+	 */
+mips_pll_scale:
+	/* modify FBDIV 40 => 208MHz */
+	PTR_LI	t0, CR_MIPS_PLL_CTRL1
+	PTR_L   t1, (t0)
+	and	t2, t1, ~CR_MIPS_PLL_FBDIV_MASK
+	or	t2, CR_MIPS_PLL_FBDIV_MASK_SET_40
+	PTR_S	t2, (t0)
+
+mips_pll_loop:
+	PTR_LI	t0, CR_MIPS_PLL_STATUS
+	PTR_L	t1, (t0)
+	bne	t1, CR_MIPS_PLL_LOCK, mips_pll_loop
+
+sys_pll_scale:
+	/*
+	 * Scale down sys_pll to 100Mhz from 350Mhz.
+	 * Set feedback to 100 to scale.
+	 */
+	PTR_LI	t0, CR_SYS_PLL_CTRL1
+	PTR_L	t1, (t0)
+	and	t2, t1, ~CR_SYS_PLL_FBDIV_MASK
+	/* FOUTVCO-MIN 400Mhz fb 100 */
+	PTR_LI	t3, CR_SYS_PLL_MINVCO_FB100
+	and	t3, t3, CR_SYS_PLL_FBDIV_MASK
+	or	v0, t3, t2
+	PTR_S	v0, (t0)
+
+pll_lock_loop1:
+	PTR_LI	t0, CR_SYS_PLL_STATUS
+	PTR_L	t1, (t0)
+	bne	t1, CR_SYS_PLL_LOCK, pll_lock_loop1
+
+suspend:
+	PTR_LI	t0, CR_TOP_MIPS_CLOCK_GATE
+	PTR_L	t1, (t0)
+	PTR_LI	t2, ~MIPS_CLOCK_GATE_MASK
+	and	v0, t1, t2
+	PTR_S	v0, (t0)
+
+resume:
+	PTR_LI	t0, CR_TOP_MIPS_CLOCK_GATE
+	PTR_L	t1, (t0)
+	PTR_LI	t2, MIPS_CLOCK_GATE_MASK
+	or	v0, t1, t2
+	PTR_S	v0, (t0)
+
+sys_pll_setup:
+	/*
+	 * Configure sys_pll at 350 Mhz.
+	 * Set feedback to 350 => VCO 1400Mhz
+	 */
+	PTR_LI	t0, CR_SYS_PLL_CTRL1
+	PTR_L	t1, (t0)
+	and	t2, t1, ~CR_SYS_PLL_FBDIV_MASK
+	PTR_LI	t3, CR_SYS_PLL_VCO_FB350
+	and	t3, t3, CR_SYS_PLL_FBDIV_MASK
+	or	v0, t3, t2
+	PTR_S	v0, (t0)
+
+pll_lock_loop:
+	PTR_LI	t0, CR_SYS_PLL_STATUS
+	PTR_L	t1, (t0)
+	bne	t1, CR_SYS_PLL_LOCK, pll_lock_loop
+
+	/*
+	 * Setup mips pll back to original VCO.
+	 * Setting up MIPS to 416 Mhz */
+mips_pll_setup:
+	/* Modify FBDIV 80 => 416MHz */
+	PTR_LI	t0, CR_MIPS_PLL_CTRL1
+	PTR_L   t1, (t0)
+	and	t2, t1, ~CR_MIPS_PLL_FBDIV_MASK
+	or	t2, CR_MIPS_PLL_FBDIV_MASK_SET_80
+	PTR_S	t2, (t0)
+
+mips_pll_loop1:
+	PTR_LI	t0, CR_MIPS_PLL_STATUS
+	PTR_L	t1, (t0)
+	bne	t1, CR_MIPS_PLL_LOCK, mips_pll_loop1
+
+ddr_clk_ungate:
+	PTR_LI  t0, CR_DDR_CTRL
+	PTR_L	t1, (t0)
+	or	t2, t1, CR_DDR_CLK_MASK
+	PTR_S	t2, (t0)
+
+exit_ddr_self_refresh:
+	/* Request DDR uPCTL to access state from low power state */
+	PTR_LI	t0, DDR_PCTL_SCTL
+	PTR_LI  t1, DDR_PCTL_SCTL_WKUP_CMD
+	PTR_S	t1, (t0)
+
+	/*
+	 * Poll to check if we transitioned
+	 * to access state.
+	 */
+	PTR_LI	t0, DDR_PCTL_STAT
+ddr_access_poll:
+	PTR_L	t1, (t0)
+	and	t2, t1, DDR_PCTL_STAT_STL_ACCESS
+	bne	t2, DDR_PCTL_STAT_STL_ACCESS, ddr_access_poll
+
+	/* start executing from DDR */
+	jr	ra
+
+END(pistachio_sram_suspend)
+
+pistachio_sram_suspend_sz:
+	EXPORT(pistachio_sram_suspend_sz)
+	PTR	.-pistachio_sram_suspend
+	.size	pistachio_sram_suspend_sz, PTRSIZE
-- 
1.9.1

