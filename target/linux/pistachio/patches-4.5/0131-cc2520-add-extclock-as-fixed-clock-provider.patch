From 92ec83266037d6d544e30cfc4944a5fed4a2af3b Mon Sep 17 00:00:00 2001
From: Shraddha Chaudhari <Shraddha.Chaudhari@imgtec.com>
Date: Wed, 23 Dec 2015 11:51:27 +0530
Subject: cc2520: add extclock as fixed clock provider

cc2520 extclock was not a clock provider, so it was not possible
for clock consumers to specify that in DT.

Add a fixed clock provider if extclock-freq property is specified in DT.

Change-Id: Ied230d0df76217acaabbc3c0d64815cb784d06d7
Signed-off-by: Shraddha Chaudhari <Shraddha.Chaudhari@imgtec.com>
---
 .../devicetree/bindings/net/ieee802154/cc2520.txt  |  4 +-
 drivers/net/ieee802154/cc2520.c                    | 56 +++++++++++++++++++++-
 include/linux/spi/cc2520.h                         |  1 +
 3 files changed, 58 insertions(+), 3 deletions(-)

diff --git a/Documentation/devicetree/bindings/net/ieee802154/cc2520.txt b/Documentation/devicetree/bindings/net/ieee802154/cc2520.txt
index 3e1356b..338a015 100644
--- a/Documentation/devicetree/bindings/net/ieee802154/cc2520.txt
+++ b/Documentation/devicetree/bindings/net/ieee802154/cc2520.txt
@@ -15,11 +15,12 @@ Required properties:
 	- reset-gpio:		GPIO spec for the RESET pin
 Optional properties:
 	- amplified:		include if the CC2520 is connected to a CC2591 amplifier
+	- #clock-cells		from common clock binding; shall be set to 0
+				required if extclock-freq is specified
 	- extclock-freq:	frequency setting of external clock generator, should be
 				between 1000000-16000000 (check datasheet for supported values)
 				extclock is disabled if extclock-freq = <0>, if not specified
 				defaults to 1MHz (reset value)
-
 Example:
 	cc2520@0 {
 		compatible = "ti,cc2520";
@@ -34,5 +35,6 @@ Example:
 		cca-gpio = <&gpio1 16 0>;
 		vreg-gpio = <&gpio0 31 0>;
 		reset-gpio = <&gpio1 12 0>;
+		#clock-cells = <0>;
 		extclock-freq = <16000000>;
 	};
diff --git a/drivers/net/ieee802154/cc2520.c b/drivers/net/ieee802154/cc2520.c
index f359764..0d0535d 100644
--- a/drivers/net/ieee802154/cc2520.c
+++ b/drivers/net/ieee802154/cc2520.c
@@ -21,6 +21,7 @@
 #include <linux/skbuff.h>
 #include <linux/of_gpio.h>
 #include <linux/ieee802154.h>
+#include <linux/clk-provider.h>
 
 #include <net/mac802154.h>
 #include <net/cfg802154.h>
@@ -212,6 +213,7 @@ struct cc2520_private {
 	bool disable_tx;		/* don't send any packets */
 	bool disable_rx;		/* disable rx */
 	bool started;			/* Flag to know if device is up */
+	struct clk *clk;		/* external clock */
 };
 
 /* Generic Functions */
@@ -789,11 +791,45 @@ static int cc2520_get_platform_data(struct spi_device *spi,
 		 * default to 1MHz(reset value)
 		 */
 		pdata->extclockfreq = CC2520_EXTCLOCK_DEFAULT_FREQ;
-	}
+	} else
+		pdata->registerclk = true;
 
 	return 0;
 }
 
+static int cc2520_register_clk(struct spi_device *spi,
+			       struct cc2520_platform_data *pdata)
+{
+	struct device_node *np = spi->dev.of_node;
+	struct cc2520_private *priv = spi_get_drvdata(spi);
+	int ret = 0;
+
+	if (pdata->registerclk) {
+		if (np) {
+			priv->clk = clk_register_fixed_rate(&spi->dev, np->name,
+					NULL, CLK_IS_ROOT, pdata->extclockfreq);
+
+			if (!IS_ERR(priv->clk)) {
+				ret = of_clk_add_provider(np,
+							  of_clk_src_simple_get,
+							  priv->clk);
+				if (ret) {
+					clk_unregister(priv->clk);
+					dev_err(&spi->dev,
+						"Failed to add clk provider\n");
+				}
+			} else {
+				dev_err(&spi->dev, "Failed to register clk\n");
+				ret = PTR_ERR(priv->clk);
+			}
+		} else
+			dev_err(&spi->dev, "No device node found, ext-clk won't"
+						" be registered\n");
+	}
+
+	return ret;
+}
+
 static int cc2520_hw_init(struct cc2520_private *priv)
 {
 	u8 status = 0, state = 0xff;
@@ -1151,10 +1187,21 @@ static int cc2520_probe(struct spi_device *spi)
 
 	ret = sysfs_create_group(&spi->dev.kobj, &dev_attr_group);
 	if (ret)
-		goto err_hw_init;
+		goto err_free_device;
+
+	ret = cc2520_register_clk(spi, &pdata);
+	if (ret)
+		goto err_free_sysfs;
 
 	return 0;
 
+err_free_sysfs:
+	sysfs_remove_group(&spi->dev.kobj, &dev_attr_group);
+
+err_free_device:
+	ieee802154_unregister_hw(priv->hw);
+	ieee802154_free_hw(priv->hw);
+
 err_hw_init:
 	mutex_destroy(&priv->buffer_mutex);
 	flush_work(&priv->fifop_irqwork);
@@ -1165,6 +1212,11 @@ static int cc2520_remove(struct spi_device *spi)
 {
 	struct cc2520_private *priv = spi_get_drvdata(spi);
 
+	if (priv->clk) {
+		of_clk_del_provider(spi->dev.of_node);
+		clk_unregister(priv->clk);
+	}
+
 	sysfs_remove_group(&spi->dev.kobj, &dev_attr_group);
 	mutex_destroy(&priv->buffer_mutex);
 	flush_work(&priv->fifop_irqwork);
diff --git a/include/linux/spi/cc2520.h b/include/linux/spi/cc2520.h
index 14137e3..a591179 100644
--- a/include/linux/spi/cc2520.h
+++ b/include/linux/spi/cc2520.h
@@ -22,6 +22,7 @@ struct cc2520_platform_data {
 	int reset;
 	int vreg;
 	unsigned int extclockfreq;
+	bool registerclk;
 	bool amplified;
 };
 
-- 
1.9.1

